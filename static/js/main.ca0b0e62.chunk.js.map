{"version":3,"sources":["components/Button.js","contexts/GlobalContext.js","components/Buttons.js","components/CurrentDisplay.js","components/HistoryDisplay.js","components/Display.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["doSomething","type","name","state","updateGlobalState","GlobalState","expression","slice","console","log","history","symbols","indexOf","length","internalExpression","replace","JSON","stringify","eval","Button","props","Consumer","className","onClick","e","GlobalContext","React","createContext","Buttons","CurrentDisplay","HistoryDisplay","Display","Calculator","App","useState","answer","Provider","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ca0b0e62.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/components/Button.css'\nimport GlobalContext from '../contexts/GlobalContext'\n\nconst doSomething = (type, name, state) => {\n    // state.updateGlobalState({...state.GlobalState, expression: state.GlobalState.expression + name});\n    // console.log('Button Clicked', name, state);\n\n    switch(type){\n        case 'func':\n            if(name === 'del'){\n                state.updateGlobalState({\n                    ...state.GlobalState,\n                    expression: state.GlobalState.expression.slice(0, -1)\n                })\n                console.log('deleting');\n            }\n            else if(name === 'AC'){\n                state.updateGlobalState({\n                    ...state.GlobalState,\n                    expression: '',\n                    history: ''\n                })\n                console.log('Clearing');\n            }\n            break;\n        case 'math':\n            const symbols = ['/','x','+','-','(',')']\n            if(state.GlobalState.expression === '' || (!!(symbols.indexOf(state.GlobalState.expression[state.GlobalState.expression.length-1])+1) && !!(symbols.indexOf(name)+1))){\n                console.log(\"Can't evaluate the expression\");\n                break;\n            }\n            else if (name === 'X'){\n                state.updateGlobalState({\n                    ...state.GlobalState,\n                    expression: state.GlobalState.expression+'x'\n                })\n                console.log('multiply');\n            }\n            else if (name === '%'){\n                if(!(symbols.indexOf(state.GlobalState.expression[state.GlobalState.expression.length-1])+1))\n                state.updateGlobalState({\n                    ...state.GlobalState,\n                    expression: state.GlobalState.expression+'/100'\n                })\n                else {\n                    console.log(\"can't add %\");\n                }\n            }\n            else {\n                state.updateGlobalState({\n                    ...state.GlobalState,\n                    expression: state.GlobalState.expression+name\n                })\n                console.log('add math fn');\n            }\n            break;\n        case 'normal':\n            state.updateGlobalState({\n                ...state.GlobalState,\n                expression: state.GlobalState.expression+name,                \n            })\n            console.log('add number');\n            break;\n        case 'equals':\n            const internalExpression = state.GlobalState.expression.replace('x', '*');\n            state.updateGlobalState({\n                ...state.GlobalState,\n                history: state.GlobalState.expression,\n                // eslint-disable-next-line\n                expression: JSON.stringify(eval(internalExpression))\n            })\n            console.log('evaluating');\n            break;\n        default:\n            break;\n    }\n}\n\nconst Button = (props) => {\n    return (\n        <GlobalContext.Consumer>\n            {\n                (state) => {\n                    return (<div className={`btn ${props.type}`} onClick={(e) => {doSomething(props.type, props.name, state)}}>\n                        <p>{props.name}</p>\n                    </div>);\n                }\n            }\n        </GlobalContext.Consumer>\n    );\n}\n\nexport default Button;","import React from 'react';\n\nconst GlobalContext = React.createContext();\n\nexport default GlobalContext;","import React from 'react';\nimport Button from './Button';\nimport '../styles/components/Buttons.css'\nconst Buttons = () => {\n    return (\n        <div className=\"button-grid\">\n            <Button name=\"AC\" type=\"func\" />\n            <Button name=\"del\" type=\"func\" />\n            <Button name=\"%\" type=\"math\" />\n            <Button name=\"/\" type=\"math\" />\n            <Button name=\"7\" type=\"normal\" />\n            <Button name=\"8\" type=\"normal\" />\n            <Button name=\"9\" type=\"normal\" />\n            <Button name=\"X\" type=\"math\" />\n            <Button name=\"4\" type=\"normal\" />\n            <Button name=\"5\" type=\"normal\" />\n            <Button name=\"6\" type=\"normal\" />\n            <Button name=\"-\" type=\"math\" />\n            <Button name=\"1\" type=\"normal\" />\n            <Button name=\"2\" type=\"normal\" />\n            <Button name=\"3\" type=\"normal\" />\n            <Button name=\"+\" type=\"math\" />\n            <Button name=\".\" type=\"normal\" />\n            <Button name=\"0\" type=\"normal\" />\n            <Button name=\"()\" type=\"func\" />\n            <Button name=\"=\" type=\"equals\" />\n        </div>\n    );\n}\n\nexport default Buttons;","import React from 'react';\nimport '../styles/components/CurrentDisplay.css'\nimport GlobalContext from '../contexts/GlobalContext';\n\nconst CurrentDisplay = () => {\n    return (\n        <GlobalContext.Consumer>\n            {(state) => {\n                return (\n                    <div className='current-display'>\n                        <p>{state.GlobalState.expression || '0'}</p>\n                    </div>\n                )\n            }}\n\n        </GlobalContext.Consumer>\n    );\n}\n\nexport default CurrentDisplay;","import React from 'react';\nimport '../styles/components/HistoryDisplay.css'\nimport GlobalContext from '../contexts/GlobalContext';\nconst HistoryDisplay = () => {\n    return (\n        <GlobalContext.Consumer>\n            {(state) => {\n                return (\n                    <div className='history-display'>\n                        <p>{state.GlobalState.history}</p>\n                    </div>\n                );\n            }}\n        </GlobalContext.Consumer>\n    );\n}\n\nexport default HistoryDisplay;","import React from 'react';\nimport CurrentDisplay from './CurrentDisplay';\nimport HistoryDisplay from './HistoryDisplay';\nimport '../styles/components/Display.css'\n\nconst Display = () => {\n    return (\n            <div className='display'>\n                <HistoryDisplay />\n                <CurrentDisplay />\n            </div>\n    );\n}\n\nexport default Display;","import React from 'react';\nimport Buttons from './Buttons';\nimport Display from './Display';\nimport '../styles/components/Calculator.css'\nimport GlobalContext from '../contexts/GlobalContext';\nconst Calculator = (props) => {\n    return (\n        <GlobalContext.Consumer>\n            { \n                state => {\n                console.log(JSON.stringify(state));\n                return (\n                    <div className='calculator'>\n                        <Display />\n                        <Buttons />\n                    </div>)\n                }\n            }\n        </GlobalContext.Consumer>\n    );\n}\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\nimport GlobalContext from './contexts/GlobalContext';\n\n\nfunction App(props) {\n\n  const [GlobalState, updateGlobalState] = React.useState({ expression:'', answer:0, history:''});\n\n  return (\n    <GlobalContext.Provider value={{GlobalState, updateGlobalState}}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Calculator/>\n          </header>\n        </div>\n    </GlobalContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/normalize.css/normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}